import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Clock, Utensils, AlertCircle } from 'lucide-react';
import { 
  collection, 
  query, 
  where, 
  getDocs, 
  onSnapshot, 
  addDoc, 
  writeBatch, 
  doc, 
  updateDoc,
  getDoc
} from 'firebase/firestore';
import { db } from '../lib/firebase';
import { useAuth } from '../contexts/AuthContext';
import { toast } from 'sonner';

// Tab Card Component
const TabCard = ({ tab, onClick, isActive }) => {
  const total = typeof tab.total === 'number' ? tab.total : 0;
  const orderCount = tab.orderCount || 0;
  
  return (
    <Card
      className={`w-32 h-20 flex flex-col items-center justify-center cursor-pointer hover:shadow-lg transition-shadow ${
        isActive 
          ? 'border-l-4 border-l-green-500 bg-green-50' 
          : 'border-l-4 border-l-gray-300 bg-gray-50'
      }`}
      onClick={onClick}
    >
      <CardContent className="flex flex-col items-center justify-center p-2 w-full">
        <div className="flex justify-between w-full items-center mb-1">
          <div className="flex items-center">
            <span className="text-xs text-gray-700 font-medium">
              Tab {tab.referenceNumber || tab.id?.substring(0, 4)}
            </span>
            <span 
              className={`ml-1 w-2 h-2 rounded-full ${
                isActive ? 'bg-green-500' : 'bg-gray-400'
              }`}
            />
          </div>
          {orderCount > 0 && (
            <span 
              className={`text-xs px-1.5 py-0.5 rounded-full ${
                isActive 
                  ? 'bg-green-100 text-green-800' 
                  : 'bg-gray-100 text-gray-800'
              }`}
            >
              {orderCount} {orderCount === 1 ? 'order' : 'orders'}
            </span>
          )}
        </div>
        <div className={`font-bold text-lg ${isActive ? 'text-gray-900' : 'text-gray-600'}`}>
          ${total.toFixed(2)}
        </div>
      </CardContent>
    </Card>
  );
};

const WaiterDashboard = ({ waiter }) => {
  // Hooks
  const navigate = useNavigate();
  const location = useLocation();
  const { currentUser } = useAuth();
  
  // State
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [orderItems, setOrderItems] = useState([
    { menuItemId: '', quantity: 1, notes: '', category: '' }
  ]);
  const [orderNotes, setOrderNotes] = useState('');
  const [menuItems, setMenuItems] = useState([]);
  const [categories, setCategories] = useState([]);
  const [selectedMenuItem, setSelectedMenuItem] = useState('');
  const [activeTabs, setActiveTabs] = useState([]);
  const [inactiveTabs, setInactiveTabs] = useState([]);
  const [activeOrders, setActiveOrders] = useState([]);
  const [selectedTabId, setSelectedTabId] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [waiterData, setWaiterData] = useState({
    id: waiter?.id || '',
    name: waiter?.name || 'Waiter',
    restaurantId: waiter?.restaurantId || ''
  });
  const [tabsUnsub, setTabsUnsub] = useState(null);
  const [menuUnsub, setMenuUnsub] = useState(null);
  
  // Refs
  const ordersUnsubsRef = useRef([]);
  const isMounted = useRef(true);

  // Load menu items
  const loadMenuItems = useCallback(async () => {
    try {
      const menuItemsQuery = query(
        collection(db, 'menuItems'),
        where('restaurantId', '==', waiterData.restaurantId || '')
      );
      
      const unsubscribe = onSnapshot(menuItemsQuery, (snapshot) => {
        const items = [];
        const cats = new Set(['All']);
        
        snapshot.forEach((doc) => {
          const data = doc.data();
          items.push({
            id: doc.id,
            ...data
          });
          
          if (data.category) {
            cats.add(data.category);
          }
        });
        
        setMenuItems(items);
        setCategories(Array.from(cats));
      });
      
      setMenuUnsub(() => unsubscribe);
      return unsubscribe;
    } catch (error) {
      console.error('Error loading menu items:', error);
      setError('Failed to load menu items');
      return () => {};
    }
  }, [waiterData.restaurantId]);

  // Update tab total in Firestore
  const updateTabTotal = useCallback(async (tabId) => {
    if (!tabId) return;
    
    try {
      const ordersQuery = query(
        collection(db, 'orders'),
        where('tabId', '==', tabId),
        where('status', '==', 'active')
      );
      
      const ordersSnapshot = await getDocs(ordersQuery);
      let total = 0;
      let itemCount = 0;
      
      ordersSnapshot.forEach((doc) => {
        const order = doc.data();
        if (order.total) {
          total += order.total;
        }
        if (order.items) {
          itemCount += order.items.reduce((sum, item) => sum + (item.quantity || 0), 0);
        }
      });
      
      const tabRef = doc(db, 'tabs', tabId);
      await updateDoc(tabRef, {
        total,
        itemCount,
        orderCount: ordersSnapshot.size,
        updatedAt: new Date().toISOString()
      });
      
    } catch (error) {
      console.error(`Error updating tab ${tabId} total:`, error);
      throw error;
    }
  }, []);

  // Set up realtime tabs and orders
  const setupRealtimeTabsAndOrders = useCallback(async () => {
    if (!waiterData.id) return () => {};
    
    try {
      // Load menu items first
      await loadMenuItems();
      
      // Set up tabs listener
      const tabsQuery = query(
        collection(db, 'tabs'),
        where('waiterId', '==', waiterData.id)
      );
      
      const tabsUnsub = onSnapshot(
        tabsQuery,
        (tabsSnapshot) => {
          try {
            const tabs = [];
            tabsSnapshot.forEach((doc) => {
              const data = doc.data();
              tabs.push({
                id: doc.id,
                ...data,
                referenceNumber: data.referenceNumber || `TAB-${doc.id.substring(0, 4).toUpperCase()}`,
                total: typeof data.total === 'number' ? data.total : 0,
                waiterName: data.waiterName || 'Unassigned',
                _updatedAt: new Date().toISOString()
              });
            });
            
            setActiveTabs(tabs);
            setupOrdersListeners(tabs);
            
            // Update tab totals
            tabs.forEach(tab => {
              updateTabTotal(tab.id).catch(console.error);
            });
            
          } catch (error) {
            console.error('Error in tabs snapshot handler:', error);
            setError(`Error processing tabs: ${error.message}`);
          }
        },
        (error) => {
          console.error('Error in tabs listener:', error);
          setError(`Error loading tabs: ${error.message}`);
        }
      );
      
      setTabsUnsub(() => tabsUnsub);
      return tabsUnsub;
      
    } catch (error) {
      console.error('Error setting up realtime listeners:', error);
      setError('Failed to set up realtime data');
      return () => {};
    }
  }, [waiterData.id, loadMenuItems, updateTabTotal]);

  // Set up orders listeners
  const setupOrdersListeners = useCallback((tabs) => {
    // Clear previous listeners
    ordersUnsubsRef.current.forEach(unsub => {
      if (typeof unsub === 'function') unsub();
    });
    
    ordersUnsubsRef.current = [];
    
    // Set up new listeners for each tab
    tabs.forEach(tab => {
      const ordersQuery = query(
        collection(db, 'orders'),
        where('tabId', '==', tab.id),
        where('status', '==', 'active')
      );
      
      const unsub = onSnapshot(
        ordersQuery,
        (ordersSnapshot) => {
          try {
            const orders = [];
            ordersSnapshot.forEach(doc => {
              orders.push({
                id: doc.id,
                ...doc.data()
              });
            });
            
            setActiveOrders(prev => [
              ...prev.filter(o => o.tabId !== tab.id),
              ...orders
            ]);
            
            // Update tab total when orders change
            updateTabTotal(tab.id).catch(console.error);
            
          } catch (error) {
            console.error('Error in orders snapshot:', error);
          }
        },
        (error) => {
          console.error('Error in orders listener:', error);
        }
      );
      
      ordersUnsubsRef.current.push(unsub);
    });
  }, [updateTabTotal]);

  // Initialize component
  useEffect(() => {
    const initialize = async () => {
      try {
        setIsLoading(true);
        
        // Set waiter data from props or auth
        if (!waiter && currentUser) {
          const userDoc = await getDoc(doc(db, 'users', currentUser.uid));
          if (userDoc.exists()) {
            const userData = userDoc.data();
            setWaiterData({
              id: userData.waiterId || currentUser.uid,
              name: userData.name || 'Waiter',
              restaurantId: userData.restaurantId || ''
            });
          }
        }
        
        // Set up realtime listeners
        await setupRealtimeTabsAndOrders();
        
      } catch (error) {
        console.error('Error initializing dashboard:', error);
        setError(`Failed to initialize: ${error.message}`);
      } finally {
        setIsLoading(false);
      }
    };
    
    initialize();
    
    // Cleanup function
    return () => {
      isMounted.current = false;
      if (tabsUnsub) tabsUnsub();
      if (menuUnsub) menuUnsub();
      ordersUnsubsRef.current.forEach(unsub => {
        if (typeof unsub === 'function') unsub();
      });
      ordersUnsubsRef.current = [];
    };
  }, [waiter, currentUser, tabsUnsub, menuUnsub, setupRealtimeTabsAndOrders]);

  // Rest of the component JSX...
  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8 flex justify-between items-center">
          <h1 className="text-2xl font-bold text-gray-900">Waiter Dashboard</h1>
          <div className="flex items-center space-x-4">
            <Button variant="outline" onClick={() => navigate('/waiterhome')}>
              Back to Home
            </Button>
          </div>
        </div>
      </header>
      
      <main className="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          </div>
        ) : error ? (
          <div className="bg-red-50 border-l-4 border-red-400 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <AlertCircle className="h-5 w-5 text-red-400" aria-hidden="true" />
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-700">{error}</p>
              </div>
            </div>
          </div>
        ) : (
          <div className="space-y-6">
            {/* Active Tabs */}
            <div>
              <h2 className="text-lg font-medium text-gray-900 mb-4">Active Tabs</h2>
              <div className="flex flex-wrap gap-3">
                {activeTabs.filter(tab => tab.status === 'active').length > 0 ? (
                  activeTabs
                    .filter(tab => tab.status === 'active')
                    .map(tab => (
                      <TabCard 
                        key={tab.id} 
                        tab={tab} 
                        onClick={() => {
                          setSelectedTabId(tab.id);
                        }}
                        isActive={true}
                      />
                    ))
                ) : (
                  <p className="text-gray-500">No active tabs found</p>
                )}
              </div>
            </div>
            
            {/* Inactive Tabs */}
            <div>
              <h2 className="text-lg font-medium text-gray-900 mb-4">Inactive Tabs</h2>
              <div className="flex flex-wrap gap-3">
                {activeTabs.filter(tab => tab.status !== 'active').length > 0 ? (
                  activeTabs
                    .filter(tab => tab.status !== 'active')
                    .map(tab => (
                      <TabCard 
                        key={tab.id} 
                        tab={tab} 
                        onClick={() => {
                          setSelectedTabId(tab.id);
                        }}
                        isActive={false}
                      />
                    ))
                ) : (
                  <p className="text-gray-500">No inactive tabs found</p>
                )}
              </div>
            </div>
            
            {/* Active Orders */}
            <div>
              <h2 className="text-lg font-medium text-gray-900 mb-4">Active Orders</h2>
              {activeOrders.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {activeOrders.map(order => (
                    <Card key={order.id} className="overflow-hidden">
                      <CardHeader className="bg-gray-50 px-4 py-3">
                        <div className="flex justify-between items-center">
                          <CardTitle className="text-sm font-medium">
                            Order #{order.orderNumber || order.id.substring(0, 6)}
                          </CardTitle>
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            {order.status || 'Active'}
                          </span>
                        </div>
                      </CardHeader>
                      <CardContent className="p-4">
                        <div className="space-y-2">
                          {order.items?.map((item, index) => (
                            <div key={index} className="flex justify-between text-sm">
                              <div>
                                <span className="font-medium">{item.quantity}x</span>{' '}
                                {item.name}
                                {item.notes && (
                                  <span className="ml-1 text-xs text-gray-500">({item.notes})</span>
                                )}
                              </div>
                              <div>${(item.price * item.quantity).toFixed(2)}</div>
                            </div>
                          ))}
                        </div>
                        <div className="mt-4 pt-3 border-t border-gray-100">
                          <div className="flex justify-between font-medium">
                            <span>Total</span>
                            <span>${order.total?.toFixed(2) || '0.00'}</span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500">No active orders found</p>
              )}
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default WaiterDashboard;
