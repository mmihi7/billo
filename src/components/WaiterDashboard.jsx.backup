import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Clock, Utensils, AlertCircle } from 'lucide-react';
import { 
  collection, 
  query, 
  where, 
  getDocs, 
  onSnapshot, 
  addDoc, 
  writeBatch, 
  doc, 
  updateDoc,
  getDoc
} from 'firebase/firestore';
import { db } from '../lib/firebase';
import { useAuth } from '../contexts/AuthContext';
import { toast } from 'sonner';

// Tab Card Component
const TabCard = ({ tab, onClick, isActive }) => {
  // Ensure total is always a number and formatted to 2 decimal places
  const total = typeof tab.total === 'number' ? tab.total : 0;
  const orderCount = tab.orderCount || 0;
  return (
    <Card
      className={`w-32 h-20 flex flex-col items-center justify-center cursor-pointer hover:shadow-lg transition-shadow ${
        isActive 
          ? 'border-l-4 border-l-green-500 bg-green-50' 
          : 'border-l-4 border-l-gray-300 bg-gray-50'
      }`}
      onClick={onClick}
    >
      <CardContent className="flex flex-col items-center justify-center p-2 w-full">
        <div className="flex justify-between w-full items-center mb-1">
          <div className="flex items-center">
            <span className="text-xs text-gray-700 font-medium">Tab {tab.referenceNumber || tab.id?.substring(0, 4)}</span>
            <span className={`ml-1 w-2 h-2 rounded-full ${
              isActive ? 'bg-green-500' : 'bg-gray-400'
            }`}></span>
          </div>
          {orderCount > 0 && (
            <span className={`text-xs px-1.5 py-0.5 rounded-full ${
              isActive 
                ? 'bg-green-100 text-green-800' 
                : 'bg-gray-100 text-gray-800'
            }`}>
              {orderCount} {orderCount === 1 ? 'order' : 'orders'}
            </span>
          )}
        </div>
        <div className={`font-bold text-lg ${isActive ? 'text-gray-900' : 'text-gray-600'}`}>
          ${total.toFixed(2)}
        </div>
      </CardContent>
    </Card>
  );
};

const WaiterDashboard = ({ waiter }) => {
  console.log('WaiterDashboard mounted with waiter:', waiter);
  // All hooks must be declared at the top level, before any conditional returns
  const navigate = useNavigate();
  const location = useLocation();
  const { currentUser } = useAuth();
  const [isSubmitting, setIsSubmitting] = useState(false); // Added missing state
  
  // Order form state - modified to include category in each item
  const [orderItems, setOrderItems] = useState([
    { menuItemId: '', quantity: 1, notes: '', category: '' }
  ]);
  const [orderNotes, setOrderNotes] = useState('');
  // Menu items state
  const [menuItems, setMenuItems] = useState([]);
  const [categories, setCategories] = useState([]);
  const [selectedMenuItem, setSelectedMenuItem] = useState('');
  // Core state
  const [activeTabs, setActiveTabs] = useState([]);
  const [inactiveTabs, setInactiveTabs] = useState([]);
  const [activeOrders, setActiveOrders] = useState([]);
  const [selectedTabId, setSelectedTabId] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [showOrderForm, setShowOrderForm] = useState(false);
  
  // Refs for cleanup
  const ordersUnsubsRef = useRef([]);
  
  // Get current user and waiter data - moved to the top with other state declarations
  const [waiterData, setWaiterData] = useState({
    id: waiter?.id || '',
    name: waiter?.name || 'Waiter',
    restaurantId: waiter?.restaurantId || ''
  });
  
  // State for unsubscribers - moved to the top with other state declarations
  const [tabsUnsub, setTabsUnsub] = useState(null);
  const [menuUnsub, setMenuUnsub] = useState(null);

  // Debug function - moved to top level
  const debugCheckTabs = useCallback(async () => {
    try {
      console.log('=== DEBUG: Checking Firestore tabs ===');
      const tabsSnapshot = await getDocs(collection(db, 'tabs'));
      tabsSnapshot.forEach(doc => {
        console.log(`Tab ${doc.id}:`, doc.data());
      });
      // Also check if we have any active tabs in state
      console.log('Active tabs in state:', activeTabs);
    } catch (error) {
      console.error('Debug check failed:', error);
    }
  }, [activeTabs]);
  // Calculate order total
  const calculateOrderTotal = useCallback((items) => {
    if (!items || !Array.isArray(items)) return 0;
    const total = items.reduce((sum, item) => {
      const price = parseFloat(item.price) || 0;
      const quantity = parseInt(item.quantity) || 0;
      return sum + (price * quantity);
    }, 0);
    return total;
  }, []);
  // Format time duration
  const formatDuration = useCallback((startTime) => {
    const diff = Math.floor((new Date() - new Date(startTime)) / 1000 / 60);
    return `${diff} min`;
  }, []);
  // Function to check tab data in Firestore
  const checkTabData = async (tabId) => {
    try {
      const tabDoc = await getDoc(doc(db, 'tabs', tabId));
      if (tabDoc.exists()) {
        console.log('Tab data from Firestore:', tabDoc.data());
        return tabDoc.data();
      }
      console.log('No such tab!');
      return null;
    } catch (error) {
      console.error('Error getting tab data:', error);
      return null;
    }
  };
  // Function to recalculate and update tab total based on its orders
  const updateTabTotal = useCallback(async (tabId) => {
    try {
      console.log(`[updateTabTotal] Recalculating total for tab ${tabId}`);
      // Get all orders for this tab
      const ordersSnapshot = await getDocs(query(
        collection(db, 'orders'),
        where('tabId', '==', tabId)
      ));
      console.log(`[updateTabTotal] Found ${ordersSnapshot.size} orders for tab ${tabId}`);
      // Calculate total from all orders
      let total = 0;
      let orderCount = 0;
      let itemCount = 0;
      ordersSnapshot.forEach(doc => {
        const order = doc.data();
        if (order.items && Array.isArray(order.items)) {
          // Calculate order total from items
          const orderTotal = order.items.reduce((sum, item) => {
            const itemTotal = (parseFloat(item.price) || 0) * (parseInt(item.quantity) || 1);
            return sum + itemTotal;
          }, 0);
          total += orderTotal;
          orderCount++;
          itemCount += order.items.reduce((sum, item) => sum + (parseInt(item.quantity) || 1), 0);
        }
      });
      console.log(`[updateTabTotal] Tab ${tabId} - Total: $${total.toFixed(2)}, Orders: ${orderCount}, Items: ${itemCount}`);
      // Update the tab with the calculated total
      const tabRef = doc(db, 'tabs', tabId);
      await updateDoc(tabRef, {
        total: total,
        orderCount: orderCount,
        itemCount: itemCount,
        updatedAt: new Date()
      });
      console.log(`[updateTabTotal] Successfully updated tab ${tabId}`);
      return total;
    } catch (error) {
      console.error(`[updateTabTotal] Error updating tab ${tabId}:`, error);
      throw error;
    }
  }, []);
  // Order submission handler
  const handleOrderSubmit = async (e) => {
    e.preventDefault();
    if (!selectedTabId || !selectedItems.length) {
      toast.error('Please select a tab and at least one item');
      return;
    }
    try {
      setIsSubmitting(true);
      
      // First, get the current tab data
      const tabDoc = await getDoc(doc(db, 'tabs', selectedTabId));
      if (!tabDoc.exists()) {
        throw new Error('Tab not found');
      }
      const tabData = tabDoc.data();
      
      // Create a new order
      const orderRef = doc(collection(db, 'orders'));
      const orderTotal = selectedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      const newOrder = {
        id: orderRef.id,
        tabId: selectedTabId,
        items: selectedItems.map(item => ({
          id: item.id,
          name: item.name,
          price: parseFloat(item.price), // Ensure we store as number
          quantity: parseInt(item.quantity), // Ensure we store as number
          notes: item.notes || ''
        })),
        status: 'pending',
        total: orderTotal,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      // Update tab status to active
      const tabRef = doc(db, 'tabs', selectedTabId);
      // Use a batch to ensure both operations complete together
      const batch = writeBatch(db);
      batch.set(orderRef, newOrder);
      batch.update(tabRef, {
        status: 'active',
        updatedAt: new Date()
      });
      // If this is the first order on an inactive tab, activate it
      if (tabData.status === 'inactive') {
        batch.update(tabRef, {
          status: 'active',
          waiterId: waiterData.id,
          waiterName: waiterData.name || 'Waiter',
          orderCount: 1,
          updatedAt: new Date()
        });
      } else {
        // Just update the order count for existing active tabs
        const newOrderCount = (tabData.orderCount || 0) + 1;
        batch.update(tabRef, {
          orderCount: newOrderCount,
          updatedAt: new Date()
        });
      }
      
      // Commit the batch
      await batch.commit();
      
      // Then update the tab total based on all orders
      await updateTabTotal(selectedTabId);
      // After successful order, clear the form and show success message
      setSelectedItems([]);
      setSelectedTabId('');
      toast.success('Order placed successfully!');
    } catch (error) {
      console.error('Error placing order:', error);
      toast.error('Failed to place order');
    } finally {
      setIsSubmitting(false);
    }
  };
  // Load menu items and categories for the restaurant
  const loadMenuItems = useCallback(() => {
    try {
      const menuQuery = query(
        collection(db, 'menuItems'),
        where('restaurantId', '==', restaurantId)
      );
      const unsubscribe = onSnapshot(menuQuery, (menuSnapshot) => {
        const items = menuSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
          price: parseFloat(doc.data().price) || 0
        }));
        setMenuItems(items);
        const uniqueCategories = Array.from(
          new Set(items.map(item => item.category))
        ).filter(Boolean);
        setCategories(uniqueCategories);
      });
      return unsubscribe;
    } catch (err) {
      console.error('Error setting up menu items listener:', err);
      return () => {}; // Return empty cleanup function in case of error
    }
  }, [restaurantId]);

  // Load active tabs and orders on component mount
  useEffect(() => {
    let isMounted = true;
    
    const initialize = async () => {
      try {
        const menuUnsubscribe = loadMenuItems();
        if (isMounted) {
          setMenuUnsub(() => menuUnsubscribe);
          setupRealtimeTabsAndOrders();
        } else {
          menuUnsubscribe(); // Clean up if component unmounted
        }
      } catch (error) {
        console.error('Error initializing WaiterDashboard:', error);
        if (isMounted) {
          setError('Failed to initialize dashboard');
          setIsLoading(false);
        }
      }
    };

    initialize();

    // Cleanup function
    return () => {
      isMounted = false;
      if (tabsUnsub) tabsUnsub();
      if (menuUnsub) menuUnsub();
      ordersUnsubsRef.current.forEach(unsub => {
        if (typeof unsub === 'function') unsub();
      });
    };
  }, [waiterData, currentUser, menuUnsub, tabsUnsub]);

  // Set up realtime tabs and orders
  const setupRealtimeTabsAndOrders = useCallback(async () => {
    // Track which tabs we've already processed to avoid duplicate updates
    const processedTabs = new Set();

    try {
      // Listen for tabs where waiterId matches current waiter
      const tabsQuery = query(
        collection(db, 'tabs'),
        where('waiterId', '==', waiterData.id || '')
      );

      // Set up tabs listener
      const tabsUnsub = onSnapshot(
        tabsQuery,
        (tabsSnapshot) => {
          try {
            console.log('Tabs snapshot received. Size:', tabsSnapshot.size);
            const tabs = [];
            tabsSnapshot.forEach((doc) => {
              try {
                const data = doc.data();
                tabs.push({
                  id: doc.id,
                  ...data,
                  referenceNumber: data.referenceNumber || data.tableNumber || `TAB-${doc.id.substring(0, 4).toUpperCase()}`,
                  total: typeof data.total === 'number' ? data.total : 0,
                  waiterName: data.waiterName || 'Unassigned',
                  _updatedAt: new Date().toISOString()
                });
              } catch (error) {
                console.error(`Error processing tab ${doc.id}:`, error);
              }
            });
            console.log('Processed Active Tabs:', tabs);
            setActiveTabs(tabs);
            
            // Set up orders listeners for each tab
            setupOrdersListeners(tabs);
            
            // Update the tab's total and order count in Firestore if not already processed
            tabs.forEach(tab => {
              if (!processedTabs.has(tab.id)) {
                processedTabs.add(tab.id);
                updateTabTotal(tab.id).catch(error => {
                  console.error(`Error updating tab ${tab.id} total:`, error);
                });
              }
            });
          } catch (error) {
            console.error('Error in tabs snapshot handler:', error);
            setError(`Error processing tabs: ${error.message}`);
          }
        },
        (error) => {
          console.error('Error in tabs listener:', {
            code: error.code,
            message: error.message,
            stack: error.stack
          });
          setError(`Error loading tabs: ${error.message}`);
        }
      );

      // Store the tabs unsubscribe function
      setTabsUnsub(() => tabsUnsub);
      
      return tabsUnsub;
    } catch (error) {
      console.error('Error setting up tabs listener:', error);
      setError('Failed to set up tabs listener');
      return () => {}; // Return empty cleanup function
    }
  }, [waiterData.id, updateTabTotal, setTabsUnsub, setActiveTabs, setError]);
    // Track which tabs we've already processed to avoid duplicate updates
    const processedTabs = new Set();

    try {
      // Listen for tabs where waiterId matches current waiter
      const tabsQuery = query(
        collection(db, 'tabs'),
        where('waiterId', '==', waiterData.id || '')
      );

      // Set up tabs listener
      const tabsUnsub = onSnapshot(
        tabsQuery,
        (tabsSnapshot) => {
          try {
            console.log('Tabs snapshot received. Size:', tabsSnapshot.size);
            const tabs = [];
            tabsSnapshot.forEach((doc) => {
              try {
                const data = doc.data();
                tabs.push({
                  id: doc.id,
                  ...data,
                  referenceNumber: data.referenceNumber || data.tableNumber || `TAB-${doc.id.substring(0, 4).toUpperCase()}`,
                  total: typeof data.total === 'number' ? data.total : 0,
                  waiterName: data.waiterName || 'Unassigned',
                  _updatedAt: new Date().toISOString()
                });
              } catch (error) {
                console.error(`Error processing tab ${doc.id}:`, error);
              }
            });
            console.log('Processed Active Tabs:', tabs);
            setActiveTabs(tabs);
            
            // Set up orders listeners for each tab
            setupOrdersListeners(tabs);
            
            // Update the tab's total and order count in Firestore if not already processed
            tabs.forEach(tab => {
              if (!processedTabs.has(tab.id)) {
                processedTabs.add(tab.id);
                updateTabTotal(tab.id).catch(error => {
                  console.error(`Error updating tab ${tab.id} total:`, error);
                });
              }
            });
          } catch (error) {
            console.error('Error in tabs snapshot handler:', error);
            setError(`Error processing tabs: ${error.message}`);
            setIsLoading(false);
          }
        },
        (error) => {
          console.error('Error in tabs listener:', {
            code: error.code,
            message: error.message,
            stack: error.stack
          });
          setError(`Error loading tabs: ${error.message}`);
          setIsLoading(false);
        }
      );
      
      // Store the tabs unsubscribe function
      setTabsUnsub(() => tabsUnsub);
      
      return tabsUnsub;
    } catch (error) {
      console.error('Error setting up tabs listener:', error);
      setError('Failed to set up tabs listener');
      // Listen for menu items
    const menuItemsQuery = query(
      collection(db, 'menuItems'),
      where('restaurantId', '==', waiterData.restaurantId)
    );

    menuUnsub = onSnapshot(menuItemsQuery, 
      (snapshot) => {
        if (!isMounted) return;
        const items = [];
        const cats = new Set();
        
        snapshot.forEach(doc => {
          const item = { id: doc.id, ...doc.data() };
          items.push(item);
          if (item.category) {
            cats.add(item.category);
          }
        });

        setMenuItems(items);
        setCategories(['All', ...Array.from(cats).sort()]);
      },
      (error) => {
        console.error('Error in menu items listener:', error);
        setError(`Error loading menu items: ${error.message}`);
      }
    );

    // Listen for tabs
    const tabsQuery = query(
      collection(db, 'tabs'),
      where('waiterId', '==', waiterData.id),
      where('status', 'in', ['open', 'active'])
    );

    tabsUnsub = onSnapshot(tabsQuery,
      async (snapshot) => {
        if (!isMounted) return;
        
        try {
          const tabs = [];
          const tabIds = [];
          
          // Process tabs
          snapshot.forEach(doc => {
            const tab = { id: doc.id, ...doc.data() };
            tabs.push(tab);
            tabIds.push(doc.id);
            
            // Update tab total if needed
            if (tab.status === 'active') {
              updateTabTotal(tab.id).catch(error => {
                console.error(`Error updating tab ${tab.id} total:`, error);
              });
            }
          });

          // Update state
          setActiveTabs(tabs);
          
          // Set up order listeners for each tab
          const newUnsubs = [];
          const processedTabs = new Set();
          
          // For each tab, set up order listener
          for (const tab of tabs) {
            if (processedTabs.has(tab.id)) continue;
            processedTabs.add(tab.id);
            
            const ordersQuery = query(
              collection(db, 'orders'),
              where('tabId', '==', tab.id),
              where('status', 'in', ['pending', 'preparing', 'ready'])
            );
            
            const unsub = onSnapshot(ordersQuery, 
              (ordersSnapshot) => {
                if (!isMounted) return;
                
                const orders = [];
                ordersSnapshot.forEach(doc => {
                  orders.push({ id: doc.id, ...doc.data() });
                });
                
                // Update active orders
                setActiveOrders(prev => {
                  const filtered = prev.filter(order => order.tabId !== tab.id);
                  return [...filtered, ...orders];
                });
                
                // Update tab total when orders change
                updateTabTotal(tab.id).catch(console.error);
              },
              (error) => {
                console.error(`Error in orders listener for tab ${tab.id}:`, error);
              }
            );
            
            newUnsubs.push(unsub);
          }
          
          // Update orders unsubs
          ordersUnsubsRef.current = newUnsubs;
          
        } catch (error) {
          console.error('Error in tabs snapshot handler:', error);
          setError(`Error processing tabs: ${error.message}`);
        }
      },
      (error) => {
        console.error('Error in tabs listener:', {
          code: error.code,
          message: error.message,
          stack: error.stack
        });
        setError(`Error loading tabs: ${error.message}`);
      }
    );
    
    // Store the tabs unsubscribe function
    setTabsUnsub(() => tabsUnsub);
    
    // Return cleanup function
    return cleanup;
  }, [waiterData.id, waiterData.restaurantId, updateTabTotal]);
  
  // Set up realtime listeners and handle cleanup
  useEffect(() => {
    const cleanup = setupRealtimeTabsAndOrders();
    
    // Cleanup function
    return () => {
      if (cleanup) cleanup();
      if (tabsUnsub) tabsUnsub();
      if (menuUnsub) menuUnsub();
      ordersUnsubsRef.current.forEach(unsub => {
        if (typeof unsub === 'function') unsub();
      });
      ordersUnsubsRef.current = [];
    };
  }, [setupRealtimeTabsAndOrders, tabsUnsub, menuUnsub]);

  // Call debug function on mount
  useEffect(() => {
    const runDebug = async () => {
      try {
        await debugCheckTabs();
      } catch (error) {
        console.error('Debug check failed:', error);
      }
    };
    runDebug();
  }, [debugCheckTabs]);


  // Handle loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  // Handle error state
  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center p-6 max-w-md">
          <div className="w-12 h-12 rounded-full bg-red-100 flex items-center justify-center mx-auto mb-4">
            <AlertCircle className="w-6 h-6 text-red-600" />
          </div>
          <h2 className="text-xl font-semibold mb-2">Error Loading Dashboard</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <Button onClick={() => window.location.reload()}>Try Again</Button>
        </div>
      </div>
    );
  }

  // Main component render
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8 flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Waiter Dashboard</h1>
            <p className="text-sm text-gray-500 mt-1">
              Welcome, {waiterData.name || currentUser?.displayName || 'Waiter'}
            </p>
          </div>
          <div className="flex space-x-2">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={debugCheckTabs}
            >
              Debug Tabs
            </Button>
          </div>
          <Button 
            variant="outline" 
            onClick={() => {
              console.log('Exit button clicked, navigating to /waiterhome');
              window.location.href = '/waiterhome';
            }}
          >
            Exit
          </Button>
        </div>
      </header>
      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
        {/* Tabs Section */}
        <div className="space-y-6 mb-8">
          {/* Active Tabs - tabs that have orders or are marked as active */}
          <div>
            <h2 className="text-lg font-medium text-gray-900 mb-4">Active Tabs</h2>
            <div className="flex flex-wrap gap-3">
              {activeTabs.filter(tab => 
                tab.status === 'active' || activeOrders.some(order => order.tabId === tab.id)
              ).length > 0 ? (
                activeTabs
                  .filter(tab => 
                    tab.status === 'active' || activeOrders.some(order => order.tabId === tab.id)
                  )
                  .map(tab => {
                    const hasOrders = activeOrders.some(order => order.tabId === tab.id);
                    console.log('Rendering Active TabCard with tab data:', {
                      id: tab.id,
                      referenceNumber: tab.referenceNumber,
                      total: tab.total,
                      orderCount: tab.orderCount,
                      itemCount: tab.itemCount,
                      hasOrders: hasOrders,
                      status: tab.status
                    });
                    return (
                      <TabCard 
                        key={tab.id} 
                        tab={tab} 
                        onClick={() => {
                          setSelectedTabId(tab.id);
                          setShowOrderForm(true);
                        }}
                        isActive={true}
                      />
                    );
                  })
              ) : (
                <div className="w-full text-center py-4 text-gray-500 bg-gray-50 rounded-lg">
                  No active tabs with orders
                </div>
              )}
            </div>
          </div>
          {/* Inactive Tabs - tabs that are explicitly marked as inactive */}
          <div>
            <h2 className="text-lg font-medium text-gray-900 mb-4">Inactive Tabs</h2>
            <div className="flex flex-wrap gap-3">
              {activeTabs.filter(tab => 
                tab.status !== 'active' && !activeOrders.some(order => order.tabId === tab.id)
              ).length > 0 ? (
                activeTabs
                  .filter(tab => 
                    tab.status !== 'active' && !activeOrders.some(order => order.tabId === tab.id)
                  )
                  .map(tab => {
                    console.log('Rendering TabCard with tab data:', {
                      id: tab.id,
                      referenceNumber: tab.referenceNumber,
                      total: tab.total,
                      orderCount: tab.orderCount,
                      itemCount: tab.itemCount,
                      hasOrders: activeOrders.some(order => order.tabId === tab.id)
                    });
                    return (
                    <TabCard 
                      key={tab.id} 
                      tab={tab} 
                      onClick={() => {
                        setSelectedTabId(tab.id);
                        setShowOrderForm(true);
                      }}
                      isActive={false}
                    />
                  )})
              ) : (
                <div className="w-full text-center py-4 text-gray-500 bg-gray-50 rounded-lg">
                  No inactive tabs
                </div>
              )}
            </div>
          </div>
        </div>
        {/* Active Orders Section - Grouped by Tab */}
        <div className="space-y-6">
          <h2 className="text-lg font-medium text-gray-900">Active Tabs with Orders</h2>
          {activeOrders.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
              {Object.entries(
                activeOrders.reduce((acc, order) => {
                  const tabNumber = order.tabNumber || 'Unknown';
                  if (!acc[tabNumber]) {
                    acc[tabNumber] = [];
                  }
                  acc[tabNumber].push(order);
                  return acc;
                }, {})
              ).map(([tabNumber, tabOrders]) => (
                <Card key={`tab-${tabNumber}`} className="overflow-hidden flex flex-col h-full">
                  <CardContent className="p-4 flex-1 flex flex-col">
                    <div className="flex justify-between items-center mb-2">
                      <h3 className="font-medium">Tab {tabNumber}</h3>
                      {/* Replaced Badge component with a simple span */}
                      <span className="inline-flex items-center rounded-full bg-blue-100 px-2.5 py-0.5 text-xs font-medium text-blue-800">
                        {tabOrders.length} {tabOrders.length === 1 ? 'order' : 'orders'}
                      </span>
                    </div>
                    <div className="space-y-2 mb-3">
                      {tabOrders.flatMap(order => 
                        (order.items || []).map((item, index) => (
                          <div key={`${order.id}-${index}`} className="flex justify-between text-sm">
                            <div className="flex items-center">
                              <span className="font-medium">{item.quantity}x</span>
                              <span className="ml-2">{item.name}</span>
                              {item.notes && (
                                <span className="ml-2 text-xs text-gray-500">({item.notes})</span>
                              )}
                            </div>
                            <span>${(item.price * item.quantity).toFixed(2)}</span>
                          </div>
                        ))
                      )}
                    </div>
                    <div className="mt-auto pt-2 border-t border-gray-100">
                      <div className="flex justify-between font-medium">
                        <span>Tab Total</span>
                        <span>${(tabOrders.reduce((sum, order) => sum + (order.total || 0), 0)).toFixed(2)}</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <Card>
              <CardContent className="p-6 text-center">
                <div className="mx-auto w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                  <Utensils className="w-6 h-6 text-gray-400" />
                </div>
                <h3 className="text-lg font-medium text-gray-900 mb-1">No active orders</h3>
                <p className="text-gray-500">New orders will appear here</p>
              </CardContent>
            </Card>
          )}
        </div>
        {/* Quick Actions */}
        <div className="mt-6">
          <h2 className="text-lg font-medium text-gray-900 mb-4">Quick Actions</h2>
          <div className="grid grid-cols-1 gap-3">
            <Button 
              variant="outline" 
              className="h-auto py-3"
              onClick={() => setShowOrderForm(true)}
            >
              <div className="text-left">
                <div className="font-medium">New Order</div>
                <div className="text-xs text-gray-500">Create a new order</div>
              </div>
            </Button>
            <Button 
              variant="outline" 
              className="h-auto py-3"
              onClick={() => navigate('/menu')}
            >
              <div className="text-left">
                <div className="font-medium">View Menu</div>
                <div className="text-xs text-gray-500">Browse menu items</div>
              </div>
            </Button>
          </div>
        </div>
        {/* New Order Form Modal */}
        {showOrderForm && (
          <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-lg flex flex-col w-full max-w-md max-h-[90vh]">
              <div className="p-6 pb-0">
                <h2 className="text-lg font-bold mb-4">Create New Order</h2>
              </div>
              <div className="overflow-y-auto px-6 flex-1">
                <form
                  onSubmit={async e => {
                    e.preventDefault();
                    if (!selectedTabId || orderItems.length === 0) return;
                    try {
                      // Get the selected tab
                      const selectedTab = activeTabs.find(tab => tab.id === selectedTabId);
                      if (!selectedTab) {
                        throw new Error('Selected tab not found');
                      }
                      // Prepare order items with menu item details
                      const itemsWithDetails = orderItems.map(item => {
                        const menuItem = menuItems.find(mi => mi.id === item.menuItemId);
                        return {
                          menuItemId: item.menuItemId,
                          name: menuItem?.name || 'Unknown Item',
                          quantity: Number(item.quantity) || 1,
                          notes: item.notes,
                          price: menuItem?.price || 0,
                        };
                      });
                      // Calculate order total
                      const orderTotal = itemsWithDetails.reduce(
                        (sum, item) => sum + (item.price * item.quantity), 
                        0
                      );
                      // Create order data
                      const newOrder = {
                        tabId: selectedTabId,
                        tabReferenceNumber: selectedTab.referenceNumber,
                        items: itemsWithDetails,
                        status: 'preparing',
                        createdAt: new Date(),
                        waiterId: waiterData.id || currentUser?.uid,
                        waiterName: waiterData.name || 'Unknown Waiter',
                        restaurantId: restaurantId,
                        total: orderTotal,
                        notes: orderNotes,
                      };
                      try {
                        console.log('Starting batch write with order data:', newOrder);
                        // Start a batch write to ensure atomic updates
                        const batch = writeBatch(db);
                        // 1. Create a new order document reference
                        const newOrderRef = doc(collection(db, 'orders'));
                        console.log('Adding order to batch:', newOrderRef.id, newOrder);
                        batch.set(newOrderRef, newOrder);
                        // 2. Update the tab status to active
                        const tabRef = doc(db, 'tabs', selectedTabId);
                        const tabUpdate = {
                          status: 'active',
                          waiterId: waiterData.id || currentUser?.uid,
                          waiterName: waiterData.name || 'Unknown Waiter',
                          updatedAt: new Date(),
                          // Set a temporary total that will be updated after the batch
                          total: 0 // Will be recalculated after batch commit
                        };
                        // 3. Update the tab in the batch
                        batch.update(tabRef, tabUpdate);
                        // 4. Commit the batch
                        console.log('Committing batch...');
                        await batch.commit();
                        console.log('Batch committed successfully');
                        // 5. After batch commit, recalculate the tab total based on all orders
                        console.log('Recalculating tab total...');
                        await updateTabTotal(selectedTabId);
                        // Force refresh of tabs data
                        const tabsSnapshot = await getDocs(query(
                          collection(db, 'tabs'),
                          where('restaurantId', '==', restaurantId),
                          where('status', '==', 'active')
                        ));
                        const updatedTabs = tabsSnapshot.docs.map(doc => ({
                          id: doc.id,
                          ...doc.data(),
                          referenceNumber: doc.data().referenceNumber || doc.data().tableNumber || `TAB-${doc.id.substring(0, 4).toUpperCase()}`
                        }));
                        console.log('Refreshed tabs after update:', updatedTabs);
                        setActiveTabs(updatedTabs);
                      } catch (batchError) {
                        console.error('Error in batch operation:', batchError);
                        console.error('Batch error details:', {
                          code: batchError.code,
                          message: batchError.message,
                          stack: batchError.stack
                        });
                        throw batchError;
                      }
                      // Reset form
                      setShowOrderForm(false);
                      setOrderItems([{ menuItemId: '', quantity: 1, notes: '', category: '' }]);
                      setOrderNotes('');
                      setSelectedMenuItem('');
                      setSelectedTabId('');
                    } catch (err) {
                      console.error('Error creating order:', err);
                      alert('Failed to create order. Please try again.');
                    }
                  }}
                >
                  <div className="space-y-4 mb-4 max-h-[calc(100vh-300px)] overflow-y-auto pr-2 -mr-2">
                    {orderItems.map((item, index) => {
                      const menuItem = menuItems.find(mi => mi.id === item.menuItemId);
                      return (
                        <div key={index} className="border border-gray-200 rounded-lg p-4 relative">
                          {orderItems.length > 1 && (
                            <button
                              type="button"
                              onClick={() => {
                                const newItems = [...orderItems];
                                newItems.splice(index, 1);
                                setOrderItems(newItems);
                              }}
                              className="absolute top-2 right-2 text-gray-400 hover:text-red-500"
                            >
                              ×
                            </button>
                          )}
                          {/* Category Select - now per item */}
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                            <select
                              className="w-full border border-gray-300 rounded px-3 py-2"
                              value={item.category}
                              onChange={e => {
                                const newItems = [...orderItems];
                                newItems[index].category = e.target.value;
                                newItems[index].menuItemId = ''; // Reset menu item when category changes
                                setOrderItems(newItems);
                              }}
                              required
                            >
                              <option value="">-- Select Category --</option>
                              {categories.map(category => (
                                <option key={category} value={category}>
                                  {category}
                                </option>
                              ))}
                            </select>
                          </div>
                          {/* Menu Item Select */}
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700 mb-1">Menu Item</label>
                            <select
                              className="w-full border border-gray-300 rounded px-3 py-2"
                              value={item.menuItemId}
                              onChange={e => {
                                const newItems = [...orderItems];
                                newItems[index].menuItemId = e.target.value;
                                setOrderItems(newItems);
                              }}
                              required
                              disabled={!item.category}
                            >
                              <option value="">-- Select Menu Item --</option>
                              {item.category && menuItems
                                .filter(menuItem => menuItem.category === item.category)
                                .map(menuItem => (
                                  <option key={menuItem.id} value={menuItem.id}>
                                    {menuItem.name} (${menuItem.price?.toFixed(2) || '0.00'})
                                  </option>
                                ))}
                            </select>
                          </div>
                          {/* Quantity & Notes */}
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                              <input
                                type="number"
                                min="1"
                                className="w-full border border-gray-300 rounded px-3 py-2"
                                required
                                value={item.quantity}
                                onChange={e => {
                                  const newItems = [...orderItems];
                                  newItems[index].quantity = e.target.value;
                                  setOrderItems(newItems);
                                }}
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">Item Notes</label>
                              <input
                                type="text"
                                className="w-full border border-gray-300 rounded px-3 py-2"
                                placeholder="e.g., no onions"
                                value={item.notes || ''}
                                onChange={e => {
                                  const newItems = [...orderItems];
                                  newItems[index].notes = e.target.value;
                                  setOrderItems(newItems);
                                }}
                              />
                            </div>
                          </div>
                          {/* Subtotal */}
                          {menuItem && (
                            <div className="mt-2 text-sm text-gray-500">
                              Subtotal: ${(menuItem.price * (item.quantity || 1)).toFixed(2)}
                            </div>
                          )}
                        </div>
                      );
                    })}
                    <Button
                      type="button"
                      variant="outline"
                      className="w-full mt-2"
                      onClick={() => {
                        setOrderItems([...orderItems, { menuItemId: '', quantity: 1, notes: '', category: '' }]);
                      }}
                    >
                      + Add Another Item
                    </Button>
                  </div>
                  <div className="bg-gray-50 p-4 rounded-lg mb-4">
                    <div className="font-medium mb-2">Order Summary</div>
                    <div className="space-y-2 mb-3 max-h-40 overflow-y-auto">
                      {orderItems
                        .filter(item => item.menuItemId)
                        .map((item, index) => {
                          const menuItem = menuItems.find(mi => mi.id === item.menuItemId);
                          if (!menuItem) return null;
                          return (
                            <div key={index} className="flex justify-between text-sm">
                              <div>
                                {item.quantity}x {menuItem.name}
                                {item.notes && ` (${item.notes})`}
                              </div>
                              <div>${(menuItem.price * item.quantity).toFixed(2)}</div>
                            </div>
                          );
                        })}
                    </div>
                    <div className="border-t border-gray-200 pt-2 mt-2 font-medium flex justify-between">
                      <span>Total:</span>
                      <span>
                        ${orderItems.reduce((total, item) => {
                          const menuItem = menuItems.find(mi => mi.id === item.menuItemId);
                          return total + (menuItem?.price || 0) * (item.quantity || 1);
                        }, 0).toFixed(2)}
                      </span>
                    </div>
                  </div>
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Order Notes (Optional)</label>
                    <textarea
                      className="w-full border border-gray-300 rounded px-3 py-2"
                      rows="2"
                      placeholder="Special instructions for the kitchen"
                      value={orderNotes}
                      onChange={e => setOrderNotes(e.target.value)}
                    />
                  </div>
                  <div className="sticky bottom-0 bg-white pt-4 pb-6 -mx-6 px-6 border-t border-gray-200">
                    <div className="flex justify-end space-x-2">
                      <Button 
                        variant="outline" 
                        type="button" 
                        onClick={() => setShowOrderForm(false)}
                      >
                        Cancel
                      </Button>
                      <Button 
                        type="submit" 
                        disabled={!selectedTabId || !orderItems.some(item => item.menuItemId)}
                      >
                        Create Order
                      </Button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default WaiterDashboard;
