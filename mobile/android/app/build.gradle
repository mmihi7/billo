plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt' // For Hilt and other annotation processors
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services' // For Firebase
}

// SDK versions are typically inherited from the root project if defined there.
// If not, these local definitions are fine, but ensure they don't conflict.
def localMinSdk = rootProject.ext.has('versions') && rootProject.ext.versions.containsKey('minSdk') ? rootProject.ext.versions.minSdk : 24
def localTargetSdk = rootProject.ext.has('versions') && rootProject.ext.versions.containsKey('targetSdk') ? rootProject.ext.versions.targetSdk : 34
def localCompileSdk = rootProject.ext.has('versions') && rootProject.ext.versions.containsKey('compileSdk') ? rootProject.ext.versions.compileSdk : 34

android {
    namespace "com.billo.app"
    compileSdkVersion localCompileSdk // Corrected assignment

    defaultConfig {
        applicationId "com.billo.app"
        minSdkVersion localMinSdk // Corrected assignment
        targetSdkVersion localTargetSdk // Corrected assignment
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        aaptOptions {
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            shrinkResources false
            // Consider:
            // applicationIdSuffix ".debug"
            // versionNameSuffix "-debug"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        // Ensure 'jvmTarget' is defined in rootProject.ext.versions, e.g., versions.jvmTarget = '17'
        jvmTarget = rootProject.ext.versions.jvmTarget
        freeCompilerArgs += [
                "-Xjvm-default=all",
                "-opt-in=kotlin.RequiresOptIn"
        ]
    }

    // Native library packaging configuration
    packagingOptions {
        jniLibs {
            // Keep native libraries uncompressed for better performance
            useLegacyPackaging = false
        }
        resources {
            excludes += [
                'META-INF/DEPENDENCIES',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/license.txt',
                'META-INF/NOTICE',
                'META-INF/NOTICE.txt',
                'META-INF/notice.txt',
                'META-INF/ASL2.0',
                'META-INF/LGPL2.1'
            ]
        }
    }

    kapt {
        correctErrorTypes = true
    }

    buildFeatures {
        buildConfig = true
        viewBinding = true
        // compose = true // Uncomment if using Jetpack Compose
    }

    packagingOptions {
        resources {
            excludes += [
                'META-INF/DEPENDENCIES',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/license.txt',
                'META-INF/NOTICE',
                'META-INF/NOTICE.txt',
                'META-INF/notice.txt',
                'META-INF/ASL2.0',
                'META-INF/LGPL2.1'
            ]
        }
    }
}

// Kotlin compilation options
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = rootProject.ext.versions.jvm
        freeCompilerArgs += [
            "-Xjvm-default=all",
            "-opt-in=kotlin.RequiresOptIn"
        ]
    }
}

// Kapt configuration
kapt {
    correctErrorTypes = true
    useBuildCache = true
    
    // Add JVM arguments for kapt
    arguments {
        arg("kapt.incremental.apt", "true")
        arg("kapt.include.compile.classpath", "false")
    }
    
    javacOptions {
        option("-Xmaxerrs", 500)
    }
}

// Repositories for local .aar or .jar files (generally not recommended, prefer Maven repository)
// repositories {
//     flatDir {
//         dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
//     }
// }

dependencies {
    // Core Library Desugaring
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$rootProject.ext.versions.desugarJdkLibs"
    
    // Google Sign-In
    implementation 'com.google.android.gms:play-services-auth:20.7.0'

    // Local .jar files (if any in the 'libs' directory)
    // implementation fileTree(include: ['*.jar'], dir: 'libs')

    // AndroidX Core & UI
    implementation "androidx.core:core-ktx:$rootProject.ext.versions.coreKtx"
    implementation "androidx.appcompat:appcompat:$rootProject.ext.versions.appcompat"
    implementation "androidx.activity:activity-ktx:$rootProject.ext.versions.activity"
    implementation "androidx.fragment:fragment-ktx:$rootProject.ext.versions.fragment"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.versions.constraintLayout"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$rootProject.ext.versions.coordinatorLayout"
    implementation "com.google.android.material:material:$rootProject.ext.versions.material"
    implementation "androidx.core:core-splashscreen:$rootProject.ext.versions.splashscreen"

    // AndroidX Lifecycle - **VERIFY THESE NAMES**
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.ext.versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.ext.versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.ext.versions.lifecycle"

    // AndroidX UI Components - **VERIFY THESE NAMES**
    implementation "androidx.recyclerview:recyclerview:$rootProject.ext.versions.recyclerView"
    implementation "androidx.cardview:cardview:$rootProject.ext.versions.cardView"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$rootProject.ext.versions.swiperefresh"
    implementation "androidx.viewpager2:viewpager2:$rootProject.ext.versions.viewPager2"

    // Navigation Component - **VERIFY THESE NAMES**
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.ext.versions.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.ext.versions.navigation"

    // Hilt (Dependency Injection)
    implementation "com.google.dagger:hilt-android:$rootProject.ext.versions.hilt"
    kapt "com.google.dagger:hilt-android-compiler:$rootProject.ext.versions.hilt"
    implementation "androidx.hilt:hilt-navigation-fragment:$rootProject.ext.versions.hiltNavigationFragment"
    kapt "androidx.hilt:hilt-compiler:$rootProject.ext.versions.androidxHiltCompiler"

    // Firebase (using BOM for version management)
    implementation platform("com.google.firebase:firebase-bom:$rootProject.ext.versions.firebaseBom")
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$rootProject.ext.versions.coroutines"

    // Image Loading (Glide)
    implementation "com.github.bumptech.glide:glide:$rootProject.ext.versions.glide"
    kapt "com.github.bumptech.glide:compiler:$rootProject.ext.versions.glide"

    // QR Code Scanning (Zxing)
    implementation "com.journeyapps:zxing-android-embedded:$rootProject.ext.versions.zxing"
    implementation "com.google.zxing:core:$rootProject.ext.versions.zxingCore"

    // Testing
    testImplementation "junit:junit:$rootProject.ext.versions.junit"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.versions.extJunit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.ext.versions.espresso"

    // Capacitor (if still needed)
    implementation project(':capacitor-android')
    implementation project(':capacitor-cordova-android-plugins')
}

// Apply Capacitor build script if it's essential for this module's build process
// apply from: 'capacitor.build.gradle'

// Apply Google Services plugin at the end, after checking for the json file
try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.exists() && servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
        logger.lifecycle("INFO: google-services.json found and google-services plugin applied.")
    } else if (!servicesJSON.exists()) {
        logger.warn("WARNING: google-services.json not found in app/ directory. Firebase services will not work.")
    } else {
        logger.warn("WARNING: google-services.json is empty. Firebase services will not work.")
    }
} catch (Exception e) {
    logger.error("ERROR: Could not apply google-services plugin. Message: ${e.message}")
}
